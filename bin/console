#!/usr/bin/env ruby

require "bundler/setup"
require "gitomator/classroom"
require "gitomator/classroom/script_util"


module Gitomator
  module Classroom
    module Console

      @@context
      @@context_file

      def self.load_context(context_file)
        require 'gitomator/classroom/context'
        @@context = Gitomator::Classroom::Context.from_file(context_file)
        @@context_file = context_file
      end

      def gitomator_context
        @@context
      end

      def gitomator_context_file
        @@context_file
      end

    end
  end
end



opts = Gitomator::Classroom::ScriptUtil::DefaultOptionParser.new(
  "Usage: #{File.basename($0)}"
).parse(ARGV)


context_file = opts[:context]

# Let's set the context, and load all the helper methods ...
unless context_file.nil?
  unless File.exist? context_file
    puts "Cannot load Gitomator context. No such file, #{context_file}"
  else
    Gitomator::Classroom::Console.load_context(context_file)


    include Gitomator::Classroom::Console

    def logger
      if gitomator_context && gitomator_context.respond_to?(:logger)
        gitomator_context.logger
      else
        nil
      end
    end

    def git
      if gitomator_context && gitomator_context.respond_to?(:git)
        gitomator_context.git
      else
        nil
      end
    end

    def hosting
      if gitomator_context && gitomator_context.respond_to?(:hosting)
        gitomator_context.hosting
      else
        nil
      end
    end

    def ci
      if gitomator_context && gitomator_context.respond_to?(:ci)
        gitomator_context.ci
      else
        nil
      end
    end

    def tagging
      if gitomator_context && gitomator_context.respond_to?(:tagging)
        gitomator_context.tagging
      else
        nil
      end
    end

  end
end


require "irb"
IRB.start

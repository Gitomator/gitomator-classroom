#!/usr/bin/env ruby

require 'bundler/setup'
require 'classroom_automator/script_util'
require 'gitomator/task/create_repos'
require 'gitomator/task/enable_disable_ci'
require 'gitomator/task/update_repo_access_permissions'

include ClassroomAutomator

usage_message  = "Usage: #{File.basename($0)} ASSIGNMENT-CONF"
parser = ScriptUtil::DefaultOptionParser.new(usage_message)
parser.opt :enable_ci, "Enable CI on the repo, after creating/updating them."
opts = parser.parse(ARGV)
abort usage_message if ARGV.length != 1

context    = ScriptUtil::context_from_file(opts[:context])
assignment = ScriptUtil::assignment_config_from_file(ARGV[0])

abort "Assignment config missing source_repo" if assignment.source_repo.nil?

# TODO: Validate config (all usernames should be members of the Students team)

tasks = []

tasks.push Gitomator::Task::CreateRepos.new(context,
  assignment.repos,
  { source_repo: assignment.source_repo, update_existing: true }
)

if opts[:enable_ci]
  tasks.push Gitomator::Task::EnableCI.new(context,
    assignment.repos, { sync: true }
  )
end

assignment.repos.each do |repo|
  tasks.push Gitomator::Task::UpdateRepoAccessPermissions.new(context,
      repo, assignment.permissions(repo), {})
end

ScriptUtil::run_tasks(tasks)

#!/usr/bin/env ruby

require 'bundler/setup'

require 'classroom_automator/config/assignment'
require 'classroom_automator/workflow/default_task_opts'
require 'classroom_automator/workflow/base_assignment_task'

#===============================================================================

module ClassroomAutomator
  module Workflow
    class CloneHandouts < ClassroomAutomator::Workflow::BaseAssignmentTask

      def initialize(assignment_conf, task_opts)
        super(assignment_conf, task_opts)

        @dest_dir = task_opts[:dest_dir]
        raise "Missing :dest_dir" if @dest_dir.nil?
        raise "No such directory #{@dest_dir}." unless Dir.exists? @dest_dir
      end


      def process_handout(handout_id, _, index)
        logger.info "Cloning handout #{handout_id} (#{index} out of #{@assignment_conf.handouts.length}) ..."

        local_repo_root = File.join(@dest_dir, handout_repo_name(handout_id))
        repo = hosting.read_repo(handout_repo_name(handout_id))

        if repo.nil?
          logger.warn("Skipping #{handout_id} (handout repo doesn't exist)")
        elsif Dir.exist? local_repo_root
          logger.info("Local repo already exists, '#{local_repo_root}'.")
        else
          git.clone(repo.url, local_repo_root)
        end
      end


      def handout_repo_name(handout_id)
        "assignment-#{@assignment_conf.assignment}-handout-#{handout_id}"
      end

    end
  end
end


#-------------------------------------------------------------------------------


if ARGV.length != 2
  abort("Usage: #{File.basename($0)} ASSIGNMENT-CONFIG DEST-DIR")
end


assignment_conf = ClassroomAutomator::Config::Assignment.from_file(ARGV[0])

task_opts = ClassroomAutomator::Workflow::DefaultTaskOpts.from_file('spec/data/task_conf2.yml')
task_opts[:dest_dir] = ARGV[1]

ClassroomAutomator::Workflow::CloneHandouts.new(assignment_conf, task_opts).run
